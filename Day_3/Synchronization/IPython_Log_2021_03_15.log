
from threading import Semaphore
sem = Semaphore(5)
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.release()
sem.release()
sem.release()
sem.release()
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.release()
sem.release()
sem.acquire()
sem.acquire()
sem.acquire()
sem = Semaphore(5)
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.release()
sem.release()
sem.release()
sem.release()
sem.release()
sem.release()
sem.release()
sem.release()
sem.release()
sem.release()
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem.acquire()
sem = Semaphore(0)
sem.acquire()
sem.release()
sem.release()
sem.release()
sem.acquire()
sem.acquire()
sem.acquire()
sem = Semaphore(1)
from threading import BoundedSemaphore
b = BoundedSemaphore(5)
b.acquire()
b.acquire()
b.acquire()
b.acquire()
b.acquire()
b.acquire()
b.release()
b.release()
b.release()
b.release()
b.release()
b.release()
b = BoundedSemaphore(0)
b.acquire()
b.release()
from queue import Queue
q = Queue(5)
q.put(5)
q.put(5)
q.put(5)
q.put(5)
q.put(5)
q.put(5)
q.get()
q.get()
q.get()
q.get()
q.get()
q.get()
q.empty
q.empty()
q.full()
q.maxsize
q.qsize()
q.put(10)
q.put(20)
q.put(30)
q.qsize()
q.task_done()
q.join()
from multiprocessing import Queue
import threading
threading.current_thread()
def testfn():
    print(threading.current_thread())
    
t = Thread(target=testfn)
t = threading.Thread(target=testfn)
t.start()
threading.enumerate()
threading.local()
import multiprocessing as mp
mp
mp.Process
mp.current_process()
mp.active_count()
mp.active_children()
from time import sleep
for i in range(10):
    mp.Process(target=sleep, args=(30,)).start()
    
mp.active_children()
mp.active_children()
mp.cpu_count()
from concurrent.futures import ThreadPoolExecutor as Executor
ex = Executor(max_workers=5)
ex.__enter__()
testfn()
def testfn():
    print("testfn() is run by", threading.current_thread())
    sleep(10)
    return 456
    
r1 = ex.submit(testfn)
r1
r1
r1.done()
r1 = ex.submit(testfn)
r1.done()
r1.result()
def testfn(i, v):
    print("testfn() is run by", threading.current_thread())
    sleep(i)
    return i * v
    
r1 = ex.submit(testfn, 30, 4)
r1 = ex.submit(testfn, 20, 4)
r1 = ex.submit(testfn, 40, 4)
r1 = ex.submit(testfn, 25, 4)
r1.done()
r1
r1 = ex.submit(testfn, 25, 4)
r1 = ex.submit(testfn, 25, 4)
r1 = ex.submit(testfn, 25, 4)
r1 = ex.submit(testfn, 25, 4)
r1 = ex.submit(testfn, 25, 4)
r1 = ex.submit(testfn, 25, 4)
r1 = ex.submit(testfn, 25, 4)
r1 = ex.submit(testfn, 25, 4)
r1 = ex.submit(testfn, 25, 4)
r1 = ex.submit(testfn, 25, 4)
r1
r1.cancel()
